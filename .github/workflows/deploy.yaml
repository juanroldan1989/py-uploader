name: Py Uploader CI/CD

on:
  push:
    branches:
      - develop
      - main

env:
  AWS_REGION: <region-id>
  ECR_REGISTRY: <account-id>.dkr.ecr.<region-id>.amazonaws.com
  APP_NAME: PyUploader
  IMAGE_TAG: ${{ github.sha }}

permissions:
  contents: read

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: flask
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Run Linting validation
        run: echo "Running linting ..."

  test:
    needs: lint
    name: Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: flask
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Run Tests
        run: echo "Running tests ..."

  build-and-push:
    needs: [test, lint]
    name: "Build/Check/Push Images"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: flask
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set ECR repository URI based on branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "REPOSITORY_URI=<account-id>.dkr.ecr.<region-id>.amazonaws.com/py-uploader-flask-dev" >> $GITHUB_ENV
          else
            echo "REPOSITORY_URI=<account-id>.dkr.ecr.<region-id>.amazonaws.com/py-uploader-flask-prod" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "[Flask] Login, Build and Tag Docker image"
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          docker build -t ${{ env.REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REPOSITORY_URI }}:${{ env.IMAGE_TAG }}
          format: "table"
          severity: "CRITICAL,HIGH"
          exit-code: 1

      - name: Check Docker best practices with Dockle
        uses: erzz/dockle-action@v1
        with:
          image: ${{ env.REPOSITORY_URI }}:${{ env.IMAGE_TAG }}
          failure-threshold: fatal
          exit-code: 1

      - name: Push to ECR
        if: success()
        run: docker push ${{ env.REPOSITORY_URI }}:${{ env.IMAGE_TAG }}

      - name: Notify Slack on success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: "#36A64F"
          SLACK_TITLE: "Security Scan Completed"
          SLACK_MESSAGE: "Security scans completed successfully. All checks passed."

      - name: Notify Slack on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: "danger"
          SLACK_TITLE: "Build or Security Scan Failed"
          SLACK_MESSAGE: "A critical error occurred in the build or security scan process. Please check GitHub Actions logs for more details."

  deploy:
    needs: [lint, test, build-and-push]
    name: "Terraform deploy"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: infra
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run terraform apply script on DEV components
        run: |
          terraform init
          terraform apply --auto-approve

      - name: Set Slack `message` and `title` on success
        if: success()
        run: |
          echo "SLACK_COLOR=good" >> $GITHUB_ENV
          echo "SLACK_TITLE_SUFFIX=(${{ github.ref_name }}) | (${{ env.APP_NAME }})" >> $GITHUB_ENV
          echo "SLACK_MESSAGE=Deployment succedded. More details within Github Actions."

      - name: Set Slack message and title on failure
        if: failure()
        run: |
          echo "SLACK_COLOR=danger" >> $GITHUB_ENV
          echo "SLACK_TITLE_SUFFIX=(${{ github.ref_name }}) | (${{ env.APP_NAME }})" >> $GITHUB_ENV
          echo "SLACK_MESSAGE=Deployment failed. More details within Github Actions."

      - name: Setup Slack variables
        run: |
          if [[ ${{ github.ref }} == 'refs/heads/develop' ]]; then
            echo "SLACK_TITLE_PREFIX=Develop" >> $GITHUB_ENV
          else
            echo "SLACK_TITLE_PREFIX=Production" >> $GITHUB_ENV
          fi

  notify:
    needs: [test, build-and-push, deploy]
    name: Notify via Slack
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Send notification about deployment status
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: ${{ env.SLACK_COLOR }}
          SLACK_TITLE: "${{ env.SLACK_TITLE_PREFIX }} ${{ env.SLACK_TITLE_SUFFIX }}"
          SLACK_MESSAGE: ${{ env.SLACK_MESSAGE }}
